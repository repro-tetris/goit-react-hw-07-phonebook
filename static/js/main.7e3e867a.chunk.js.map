{"version":3,"sources":["components/ContactForm/ContactForm.styled.js","redux/contactsSlice.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","redux/contacts/filter/contacts-filter-actions.js","components/Filter/Filter.jsx","components/Contact/ContactItem/ContactItem.styled.js","components/Contact/ContactItem/ContactItem.jsx","components/Contact/ContactList/ContactList.jsx","App.js","redux/contacts/filter/contacts-filter-reducer.js","redux/contacts/index.js","redux/store.js","index.js"],"names":["Label","styled","label","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","providesTags","addContact","mutation","contact","url","method","body","invalidatesTags","delContact","id","useGetContactsQuery","useDelContactMutation","useAddContactMutation","ContactForm","useState","name","setName","number","setNumber","handleChange","target","value","reset","onSubmit","e","preventDefault","type","pattern","title","required","onChange","changeFilter","createAction","Filter","filterStr","useSelector","state","contacts","filter","dispatch","useDispatch","toLowerCase","StyledContact","li","ContactItem","onDelete","onClick","getFiltered","items","includes","ContactList","data","isError","error","deleteContact","filteredContacts","map","App","filterReducer","createReducer","_","action","payload","combineReducers","store","configureStore","reducer","contactReducer","middleware","getDefaultMiddleware","devTools","process","setupListeners","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e3e867a.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 10px;\r\n  + input[type=\"submit\"] {\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: aquamarine;\r\n    }\r\n  }\r\n`;\r\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const contactsApi = createApi({\r\n  reducerPath: \"contactsReducer\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: \"https://616d0dc037f997001745d805.mockapi.io/contacts\",\r\n  }),\r\n  tagTypes: [\"contacts\"],\r\n  endpoints: (builder) => ({\r\n    getContacts: builder.query({\r\n      query: () => \"/contacts/\",\r\n      providesTags: [\"contacts\"],\r\n    }),\r\n    addContact: builder.mutation({\r\n      query: (contact) => ({\r\n        url: \"/contacts/\",\r\n        method: \"POST\",\r\n        body: contact,\r\n        providesTags: [\"contacts\"],\r\n      }),\r\n      invalidatesTags: [\"contacts\"],\r\n    }),\r\n\r\n    delContact: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/contacts/${id}`,\r\n        method: \"DELETE\",\r\n        providesTags: [\"contacts\"],\r\n      }),\r\n      invalidatesTags: [\"contacts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetContactsQuery,\r\n  useDelContactMutation,\r\n  useAddContactMutation,\r\n} = contactsApi;\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Label } from \"./ContactForm.styled\";\r\nimport { useAddContactMutation } from \"../../redux/contactsSlice\";\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [addContact] = useAddContactMutation();\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    if (name === \"name\") {\r\n      setName(value);\r\n    } else {\r\n      setNumber(value);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addContact({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleChange}\r\n          value={name}\r\n        />\r\n      </Label>\r\n\r\n      <Label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleChange}\r\n          value={number}\r\n        />\r\n      </Label>\r\n      <input type=\"submit\" value=\"Add contact\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const changeFilter = createAction(\"contact/changeFilter\");\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Label } from \"./Filter.styled\";\r\nimport { changeFilter } from \"../../redux/contacts/filter/contacts-filter-actions\";\r\n\r\nfunction Filter() {\r\n  const filterStr = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Label>\r\n      Find contacts by name\r\n      <input\r\n        name=\"filter\"\r\n        value={filterStr}\r\n        onChange={(e) => dispatch(changeFilter(e.target.value.toLowerCase()))}\r\n      ></input>\r\n    </Label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onFilter: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const StyledContact = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  button {\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: tomato;\r\n    }\r\n  }\r\n`;\r\n","import PropTypes from \"prop-types\";\r\nimport { StyledContact } from \"./ContactItem.styled\";\r\n\r\nfunction ContactItem({ contact: { name, number }, onDelete }) {\r\n  return (\r\n    <StyledContact>\r\n      {name}: {number}\r\n      <button onClick={onDelete}>delete</button>\r\n    </StyledContact>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    id: PropTypes.string,\r\n  }),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { ContactItem } from \"../../Contact\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  useGetContactsQuery,\r\n  useDelContactMutation,\r\n} from \"../../../redux/contactsSlice\";\r\n\r\nconst ContactList = () => {\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const { data: contacts = [], isError, error } = useGetContactsQuery();\r\n  const [deleteContact] = useDelContactMutation();\r\n\r\n  const filteredContacts = getFiltered(filter, contacts);\r\n  if (isError) return <div>An error has occurred! {error.data}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {filteredContacts.map((contact) => {\r\n          return (\r\n            <ContactItem\r\n              key={contact.id}\r\n              contact={contact}\r\n              onDelete={() => deleteContact(contact.id)}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getFiltered = (filter, items) => {\r\n  return filter\r\n    ? items.filter((contact) => contact.name.toLowerCase().includes(filter))\r\n    : items;\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\nexport default ContactList;\r\n","//import { useState, useEffect } from \"react\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport { ContactList } from \"./components/Contact\";\r\n//import { saveContacts, loadContacts } from \"./components/utils/storage\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { changeFilter } from \"./contacts-filter-actions\";\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport filterReducer from \"./filter/contacts-filter-reducer\";\r\n\r\nexport default combineReducers({\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { setupListeners } from \"@reduxjs/toolkit/dist/query\";\r\nimport contactReducer from \"./contacts\";\r\nimport { contactsApi } from \"./contactsSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware(),\r\n    contactsApi.middleware,\r\n  ],\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nsetupListeners(store.dispatch);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}